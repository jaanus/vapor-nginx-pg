# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe db)
#
version: '3.7'

volumes:
  db_data:
  db_test_data:

networks: 
  frontend:
  backend:

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  DATABASE_HOST: db
  DATABASE_NAME: vapor_database
  DATABASE_USERNAME: vapor_username
  DATABASE_PASSWORD: vapor_password

services:

  # nginx reverse proxy. Accepts public connections, provides TLS termination.
  frontend:
    image: frontend
    build:
      context: ./frontend
    ports:
      - "8081:8081"
    networks:
      - frontend
      - backend
    depends_on:
      - backend

  # nginx reverse proxy for the app that is running in Xcode.
  frontend-xcode:
    image: frontend-xcode
    build:
      context: ./frontend-xcode
    ports:
      - "8082:8082"
    networks:
      - frontend
      - backend

  # The actual Vapor app. Note that the ports are not exposed to external network,
  # meaning that the app is only accessible through the above nginx frontend. 
  backend:
    image: backend
    build:
      context: ./backend
    environment:
      <<: *shared_environment
    depends_on:
      - db
    networks:
      - backend
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "development", "--hostname", "0.0.0.0", "--port", "8080"]

  # migration.
  migrate:
    image: backend
    build:
      context: ./backend
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0
    networks:
      - backend

  # reverting migration.
  revert:
    image: backend
    build:
      context: ./backend
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0
    networks:
      - backend

  # Application database for development and regular use.
  db:
    image: postgres:12-alpine
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: vapor_username
      POSTGRES_PASSWORD: vapor_password
      POSTGRES_DB: vapor_database
    ports:
      - '5432:5432'
    networks:
      - backend

  # Application database for running tests.
  # Cleared at the start of each test.
  testdb:
    image: postgres:12-alpine
    volumes:
      - db_test_data:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: vapor_username
      POSTGRES_PASSWORD: vapor_password
      POSTGRES_DB: vapor_database
    ports:
      - '5433:5432'
    networks: 
      - backend
  